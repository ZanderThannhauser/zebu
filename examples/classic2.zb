
%%

%code requires {
	#include <stdio.h>
}

%%

// NFA string literal, parenthesis: "literal", (DFA $1)
// NFA (not) one-of-many (in range): [(^) <$1>, <$2>, <$3> (- <$4>), ...];
// NFA multiplicities <$1>?, <$1>+, <$1>*, <$1>{a, b};
// NFA concatenation: <$1> <$2> ...
// NFA -> DFA // (and simplication)
// DFA boolean-not: !<$1>
// DFA boolean-and (and simplication): <$1> & <$2> & ...
// DFA boolean-xor (and simplication): <$1> ^ <$2> ^ ...
// DFA boolean-or (and simplication): <$1> | <$2> | ...

// LRP string literal, regex, parenthesis: "token", /DFA $1/, (LRP $1)
// LRP reduction-rule multiplicities: <$1>?, <$1>+, <$1>*, <$1>{a, b};
// LRP reduction-rule concatenation: <$1> <$2> ...;
// LRP reduction-rule divider: <$1> | <$2> ... ;

// there will still have to be a tokenizer.
// the tokenizer uses the current state of the parser to look up
// the appropriate state machine to use. Given this state machine,
// the current character, and the current state, it can lookup the next
// state. When the state returns a token enum value, it's done, feed it
// to parser state machine.

%contextless whitespace: /[' ', '\n', '\t']/;
%contextless singleline_comment: /"//" [^'\n']* "\n"/;
%contextless multiline_comment: "/*" skip ( multiline_comment skip )* "*/";

`skip`: !(.*"*/") & !(.*"/*");

%start start: /['x', 'y', 'z']/ ':' /['w', 'y', 'x']/ {
	printf("'%c':'%c'\n", $1, $3);
	puts("nice.");
};

%%

















