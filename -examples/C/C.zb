
%start: translation_unit #translation_unit;

%skip: [' ', '\t', '\n'] | "//" [~'\n'] '\n';

`D`:  ['0' - '9'];
`L`:  ['a' - 'z', 'A' - 'Z', '_'];
`H`:  ['a' - 'f', 'A' - 'F', '0' - '9'];
`E`:  ['E', 'e'] ['+', '-']? D+ ;
`FS`: ('f'|'F'|'l'|'L');
`IS`: ('u'|'U'|'l'|'L')*;

`identifier`: L (L | D)*;

`constant`
	: '0' ['x', 'X'] H+ IS? // hexadecimal
	| '0'            D+ IS? // octal
	|                D+ IS? // decimal
	;

`string_literal`:
	'\"' ( "\\" . | [~('\"', '\\')] )* '\"'
;

primary_expression
	: `identifier` #identifier
	| `constant` #constant
	| `string_literal` #string_literal
	| "(" expression #expression ")"
	;

postfix_expression
	: primary_expression #primary_expression
	| postfix_expression #postfix_expression '[' expression #array_index ']'
	| postfix_expression #postfix_expression '(' #function_call ')'
	| postfix_expression #postfix_expression '(' argument_expression_list #argument_expression_list ')'
	| postfix_expression #postfix_expression '.'  `identifier` #field_access
	| postfix_expression #postfix_expression "->" `identifier` #field_access_with_dereference
	| postfix_expression #postfix_expression "++" #postfix_increment
	| postfix_expression #postfix_expression "--" #postfix_decrement
	;

argument_expression_list
	: assignment_expression #assignment_expression
	| argument_expression_list #argument_expression_list ',' assignment_expression #assignment_expression
	;

unary_expression
	: postfix_expression #postfix_expression
	| "++" #prefix_increment unary_expression #unary_expression
	| "--" #prefix_decrement unary_expression #unary_expression
	| unary_operator #unary_operator cast_expression #cast_expression
	| "sizeof" #sizeof_ unary_expression #unary_expression
	| "sizeof" #sizeof_ '(' type_name #type_name ')'
	;

unary_operator
	: '&' #ampersand
	| '*' #dereference
	| '+' #positive
	| '-' #negative
	| '~' #bitwise_not
	| '!' #logical_not
	;

cast_expression
	: unary_expression #unary_expression
	| '(' type_name #type_name ')' cast_expression #cast_expression
	;

multiplicative_expression
	: cast_expression #cast_expression
	| multiplicative_expression #multiplicative_expression '*' cast_expression #cast_expression
	| multiplicative_expression #multiplicative_expression '/' cast_expression #cast_expression
	| multiplicative_expression #multiplicative_expression '%' cast_expression #cast_expression
	;

additive_expression
	: multiplicative_expression #multiplicative_expression
	| additive_expression #additive_expression '+' multiplicative_expression #multiplicative_expression
	| additive_expression #additive_expression '-' multiplicative_expression #multiplicative_expression
	;

shift_expression
	: additive_expression #additive_expression
	| shift_expression #shift_expression "<<" additive_expression #additive_expression
	| shift_expression #shift_expression ">>" additive_expression #additive_expression
	;

relational_expression
	: shift_expression #shift_expression
	| relational_expression #relational_expression '<'  shift_expression #shift_expression
	| relational_expression #relational_expression '>'  shift_expression #shift_expression
	| relational_expression #relational_expression "<=" shift_expression #shift_expression
	| relational_expression #relational_expression ">=" shift_expression #shift_expression
	;

equality_expression
	: relational_expression #relational_expression
	| equality_expression #equality_expression "==" relational_expression #relational_expression
	| equality_expression #equality_expression "!=" relational_expression #relational_expression
	;

and_expression
	: equality_expression #equality_expression
	| and_expression #and_expression '&' equality_expression #equality_expression
	;

exclusive_or_expression
	: and_expression #and_expression
	| exclusive_or_expression #exclusive_or_expression '^' and_expression #and_expression
	;

inclusive_or_expression
	: exclusive_or_expression #exclusive_or_expression
	| inclusive_or_expression #inclusive_or_expression '|' exclusive_or_expression #exclusive_or_expression
	;

logical_and_expression
	: inclusive_or_expression #inclusive_or_expression
	| logical_and_expression #logical_and_expression "&&" inclusive_or_expression #inclusive_or_expression
	;

logical_or_expression
	: logical_and_expression #logical_and_expression
	| logical_or_expression #logical_or_expression "||" logical_and_expression #logical_and_expression
	;

conditional_expression
	: logical_or_expression #logical_or_expression
	| logical_or_expression #logical_or_expression '?' expression #expression ':' conditional_expression #conditional_expression
	;

assignment_expression
	: conditional_expression #conditional_expression
	| unary_expression #unary_expression assignment_operator #assignment_operator assignment_expression #assignment_expression
	;

assignment_operator
	:   '=' #assign
	|  "*=" #multiply_assign
	|  "/=" #divide_assign
	|  "%=" #remainder_assign
	|  "+=" #increment_assign
	|  "-=" #decrement_assign
	| "<<=" #leftbitshift_assign
	| ">>=" #rightbitshift_assign
	|  "&=" #bitwise_and_assign
	|  "^=" #bitwise_xor_assign
	|  "|=" #bitwise_or_assign
	;

expression
	: assignment_expression #assignment_expression
	| expression #expression ',' assignment_expression #assignment_expression
	;

constant_expression
	: conditional_expression #conditional_expression
	;

declaration
	: declaration_specifiers #declaration_specifiers ';'
	| declaration_specifiers #declaration_specifiers init_declarator_list #init_declarator_list ';'
	;

declaration_specifiers
	: storage_class_specifier #storage_class_specifier
	| storage_class_specifier #storage_class_specifier declaration_specifiers #declaration_specifiers
	| type_specifier #type_specifier
	| type_specifier #type_specifier declaration_specifiers #declaration_specifiers
	| type_qualifier #type_qualifier
	| type_qualifier #type_qualifier declaration_specifiers #declaration_specifiers
	;

init_declarator_list
	: init_declarator #init_declarator
	| init_declarator_list #init_declarator_list ',' init_declarator #init_declarator
	;

init_declarator
	: declarator #declarator
	| declarator #declarator '=' initializer #initializer
	;

storage_class_specifier
	: "typedef" #typedef_
	| "extern" #extern_
	| "static" #static_
	| "auto" #auto_
	| "register" #register_
	;

type_specifier
	: "void" #void_
	| "char" #char_
	| "short" #short_
	| "int" #int_
	| "long" #long_
	| "float" #float_
	| "double" #double_
	| "signed" #signed_
	| "unsigned" #unsigned_
	| struct_or_union_specifier #struct_or_union_specifier
	| enum_specifier #enum_specifier
	| "type" `identifier` #identifier
	;

struct_or_union_specifier
	: struct_or_union #struct_or_union `identifier` #identifier '{' struct_declaration_list #struct_declaration_list '}'
	| struct_or_union #struct_or_union '{' struct_declaration_list #struct_declaration_list '}'
	| struct_or_union #struct_or_union `identifier` #identifier
	;

struct_or_union
	: "struct" #struct_
	| "union" #union_
	;

struct_declaration_list
	: struct_declaration #struct_declaration
	| struct_declaration_list #struct_declaration_list struct_declaration #struct_declaration
	;

struct_declaration
	: specifier_qualifier_list #specifier_qualifier_list struct_declarator_list #struct_declarator_list ';'
	;

specifier_qualifier_list
	: type_specifier #type_specifier specifier_qualifier_list #specifier_qualifier_list
	| type_specifier #type_specifier
	| type_qualifier #type_qualifier specifier_qualifier_list #specifier_qualifier_list
	| type_qualifier #type_qualifier
	;

struct_declarator_list
	: struct_declarator #struct_declarator
	| struct_declarator_list #truct_declarator_list ',' struct_declarator #struct_declarator
	;

struct_declarator
	: declarator #declarator
	| ':' constant_expression #constant_expression
	| declarator #declarator ':' constant_expression #constant_expression
	;

enum_specifier
	: "enum" '{' enumerator_list #enumerator_list '}'
	| "enum" `identifier` #identifier '{' enumerator_list #enumerator_list '}'
	| "enum" `identifier` #identifier
	;

enumerator_list
	: enumerator #enumerator
	| enumerator_list #enumerator_list ',' enumerator #enumerator
	;

enumerator
	: `identifier` #identifier
	| `identifier` #identifier '=' constant_expression #constant_expression
	;

type_qualifier
	: "const" #const_
	| "volatile" #volatile_
	;

declarator
	: pointer #pointer direct_declarator #direct_declarator
	| direct_declarator #direct_declarator
	;

direct_declarator
	: `identifier` #identifier
	| '(' declarator #declarator ')'
	| direct_declarator #direct_declarator '[' constant_expression #constant_expression ']'
	| direct_declarator #direct_declarator '[' #array ']'
	| direct_declarator #direct_declarator '(' parameter_type_list #parameter_type_list ')'
	| direct_declarator #direct_declarator '(' identifier_list #identifier_list ')'
	| direct_declarator #direct_declarator '(' #function ')'
	;

pointer
	: '*'
	| '*' type_qualifier_list #type_qualifier_list
	| '*' pointer #pointer
	| '*' type_qualifier_list #type_qualifier_list pointer #pointer
	;

type_qualifier_list
	: type_qualifier #type_qualifier
	| type_qualifier_list #type_qualifier_list type_qualifier #type_qualifier
	;

parameter_type_list
	: parameter_list #parameter_list
	| parameter_list #parameter_list ',' "..."
	;

parameter_list
	: parameter_declaration #parameter_declaration
	| parameter_list #parameter_list ',' parameter_declaration #parameter_declaration
	;

parameter_declaration
	: declaration_specifiers #declaration_specifiers declarator #declarator
	| declaration_specifiers #declaration_specifiers abstract_declarator #abstract_declarator
	| declaration_specifiers #declaration_specifiers
	;

identifier_list
	: `identifier` #identifier
	| identifier_list #identifier_list ',' `identifier` #identifier;

type_name
	: specifier_qualifier_list #specifier_qualifier_list
	| specifier_qualifier_list #specifier_qualifier_list abstract_declarator #abstract_declarator
	;

abstract_declarator
	: pointer #pointer
	| direct_abstract_declarator #direct_abstract_declarator
	| pointer #pointer direct_abstract_declarator #direct_abstract_declarator
	;

direct_abstract_declarator
	: '(' abstract_declarator #abstract_declarator ')'
	| '[' #array ']'
	| '[' #array constant_expression #constant_expression ']'
	| direct_abstract_declarator #direct_abstract_declarator '[' #brackets ']'
	| direct_abstract_declarator #direct_abstract_declarator '[' #brackets  constant_expression #constant_expression ']'
	| '(' #function ')'
	| '(' #function parameter_type_list #parameter_type_list ')'
	| direct_abstract_declarator #direct_abstract_declarator '(' #function ')'
	| direct_abstract_declarator #direct_abstract_declarator '(' #function parameter_type_list #parameter_type_list ')'
	;

initializer
	: assignment_expression #assignment_expression
	| '{' initializer_list #initializer_list '}'
	| '{' initializer_list #initializer_list ',' '}'
	;

initializer_list
	: initializer #initializer
	| initializer_list #initializer_list ',' initializer #initializer
	;

statement
	: labeled_statement #labeled_statement
	| compound_statement #compound_statement
	| expression_statement #expression_statement
	| selection_statement #selection_statement
	| iteration_statement #iteration_statement
	| jump_statement #jump_statement
	;

labeled_statement
	: `identifier` #identifier ':' statement #statement
	| "case" constant_expression #case_ ':' statement #statement
	| "default" ':' statement #default_statement
	;

compound_statement
	: '{' '}'
	| '{' statement_list #statement_list '}'
	| '{' declaration_list #declaration_list '}'
	| '{' declaration_list #declaration_list statement_list #statement_list '}'
	;

declaration_list
	: declaration #declaration
	| declaration_list #declaration_list declaration #declaration
	;

statement_list
	: statement #statement
	| statement_list #statement_list statement #statement
	;

expression_statement
	: ';'
	| expression #expression ';'
	;

selection_statement
	: "if" #if_ '(' expression #conditional ')' compound_statement #true_case
	| "if" #if_ '(' expression #conditional')' compound_statement #true_case "else" compound_statement #false_case
	| "switch" #switch_ '(' expression  #conditional ')' statement #statement
	;

iteration_statement
	: "while" '(' expression #expression ')' statement #statement
	| "do" statement #statement "while" '(' expression #expression ')' ';'
	| "for" #for_ '(' expression_statement #setup expression_statement #conditional ')' statement #statement
	| "for" #for_ '(' expression_statement #setup expression_statement #conditional expression #delta ')' statement #statement
	;

jump_statement
	: "goto" `identifier` #goto_label ';'
	| "continue" #continue_ ';'
	| "break" #break_ ';'
	| "return" #return_ ';'
	| "return" expression #return_expression ';'
	;

translation_unit
	: external_declaration #external_declaration
	| translation_unit #translation_unit external_declaration #external_declaration
	;

external_declaration
	: function_definition #function_definition
	| declaration #declaration
	;

function_definition
	: declaration_specifiers #declaration_specifiers declarator #declarator declaration_list #declaration_list compound_statement #compound_statement
	| declaration_specifiers #declaration_specifiers declarator #declarator compound_statement #compound_statement
	| declarator #declarator declaration_list #declaration_list compound_statement #compound_statement
	| declarator #declarator compound_statement #compound_statement
	;


















