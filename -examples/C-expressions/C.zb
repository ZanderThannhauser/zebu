
%start: root;

%skip: ' ';

`D`:  ['0' - '9'];
`L`:  ['a' - 'z', 'A' - 'Z', '_'];
`H`:  ['a' - 'f', 'A' - 'F', '0' - '9'];
`E`:  ['E', 'e'] ['+', '-']? D+ ;
`FS`: ('f'|'F'|'l'|'L');
`IS`: ('u'|'U'|'l'|'L')*;

`identifier`: L (L | D)*;

`constant`
	: '0' ['x', 'X'] H+ IS? // hexadecimal
	| '0'            D+ IS? // octal
	|                D+ IS? // decimal
	;

`string_literal`: '\"' ( "\\" . | [~('\"', '\\')] )* '\"' ;

primary_expression
	: `identifier & !"sizeof"` #variable
	| `constant` #literal
	| `string_literal` #string
	| "(" expression #subexpression ")"
	;

postfix_expression
	: primary_expression #expression
	| postfix_expression #expression "[" expression #index_expression "]"
	| postfix_expression #expression "(" ")"
	| postfix_expression #expression "(" argument_expression_list #arguments ")"
	| postfix_expression #expression "."  `identifier` #dir_field_name
	| postfix_expression #expression "->" `identifier` #def_field_name
	| postfix_expression #expression "++" #increment
	| postfix_expression #expression "--" #decrement
	;

argument_expression_list
	: conditional_expression
	| argument_expression_list ',' conditional_expression
	;

unary_expression
	: postfix_expression #expression
	| "++" unary_expression
	| "--" unary_expression #decrement_expression
	| "&" unary_expression #address_of_expression
	| "*" unary_expression
	| "+" unary_expression
	| "-" unary_expression
	| "~" unary_expression
	| "!" unary_expression
	| "sizeof" unary_expression
	;

multiplicative_expression
	: unary_expression
	| multiplicative_expression '*' unary_expression
	| multiplicative_expression '/' unary_expression
	| multiplicative_expression '%' unary_expression
	;

additive_expression
	: multiplicative_expression
	| additive_expression '+' multiplicative_expression
	| additive_expression '-' multiplicative_expression
	;

shift_expression
	: additive_expression
	| shift_expression "<<" additive_expression
	| shift_expression ">>" additive_expression
	;

relational_expression
	: shift_expression
	| relational_expression '<' shift_expression
	| relational_expression '>' shift_expression
	| relational_expression "<=" shift_expression
	| relational_expression ">=" shift_expression
	;

equality_expression
	: relational_expression
	| equality_expression "==" relational_expression
	| equality_expression "!=" relational_expression
	;

and_expression
	: equality_expression
	| and_expression '&' equality_expression
	;

exclusive_or_expression
	: and_expression
	| exclusive_or_expression '^' and_expression
	;

inclusive_or_expression
	: exclusive_or_expression
	| inclusive_or_expression '|' exclusive_or_expression
	;

logical_and_expression
	: inclusive_or_expression
	| logical_and_expression "&&" inclusive_or_expression
	;

logical_or_expression
	: logical_and_expression
	| logical_or_expression "||" logical_and_expression
	;

conditional_expression
	: logical_or_expression
	| logical_or_expression '?' expression ':' conditional_expression
	;

expression
	: conditional_expression
	| expression ',' conditional_expression
	;

root: expression;


















