
`int`: ['-', '+']? ['0'-'9']+;

`float`: ['0'-'9']+ '.' ['0'-'9']+;

`char`: [~ '\\' '\"' ] | '\\' ['0' - '7']+;

`register`: "%vr"['0'-'9']+;

`label`: '.' ['a'-'z', 'A'-'Z', '_']+ ['a'-'z', 'A'-'Z', '_', '0'-'9']*;

%skip: [' ', '\t', '\n'] | "#" [~'\n']+ "\n"; // bewteen-token skip

%start: data #data text #text;

string_declare: ".string" `label` #label "," `'\"' char* '\"'` #text;

float_declare: ".float"  `label` #label "," `float` #literal;

global_declare: ".global" `label` #label "," `int` #size "," `int` #alignment;

data: ".data" (
	  string_declare #strings[]
	| float_declare  #floats[]
	| global_declare #globals[])*
	;

text: ".text" (frame #frames[])*;

frame: ".frame" `['a' - 'z']+` #label "," `int` #stacksize (instruction #instructions[])*;

instruction:
	(`label` #label ":")? // optional label
	(
		// Integer Arithmetic Instructions:
		  "i2i"      #op `register`                "=>" `register`
		| "add"      #op `register` "," `register` "=>" `register`
		| "sub"      #op `register` "," `register` "=>" `register`
		| "mult"     #op `register` "," `register` "=>" `register`
		| "lshift"   #op `register` "," `register` "=>" `register`
		| "rshift"   #op `register` "," `register` "=>" `register`
		| "mod"      #op `register` "," `register` "=>" `register`
		| "and"      #op `register` "," `register` "=>" `register`
		| "or"       #op `register` "," `register` "=>" `register`
		| "not"      #op `register`                "=>" `register`
		| "addI"     #op `register` "," `int`      "=>" `register`
		| "subI"     #op `register` "," `int`      "=>" `register`
		| "multI"    #op `register` "," `int`      "=>" `register`
		| "lshiftI"  #op `register` "," `int`      "=>" `register`
		| "rshiftI"  #op `register` "," `int`      "=>" `register`
		
		// Integer Memory Operations:
		| "loadI"    #op `int`                     "=>" `register`
		| "load"     #op `register`                "=>" `register`
		| "loadAI"   #op `register` "," `int`      "=>" `register`
		| "loadAO"   #op `register` "," `register` "=>" `register`
		| "store"    #op `register`                "=>" `register`
		| "storeAI"  #op `register`                "=>" `register` "," `int`
		| "storeAO"  #op `register`                "=>" `register` "," `register`
		
		// Compare Instructions:
		| "cmp_LT"   #op `register` "," `register` "=>" `register`
		| "cmp_LR"   #op `register` "," `register` "=>" `register`
		| "cmp_GT"   #op `register` "," `register` "=>" `register`
		| "cmp_GE"   #op `register` "," `register` "=>" `register`
		| "cmp_EQ"   #op `register` "," `register` "=>" `register`
		| "cmp_NE"   #op `register` "," `register` "=>" `register`
		| "comp"     #op `register` "," `register` "=>" `register`
		| "testeq"   #op `register`                "=>" `register`
		| "testne"   #op `register`                "=>" `register`
		| "testgt"   #op `register`                "=>" `register`
		| "testge"   #op `register`                "=>" `register`
		| "testlt"   #op `register`                "=>" `register`
		| "testle"   #op `register`                "=>" `register`
		
		// Floating-point Operations:
		| "f2i"      #op `register`                "=>" `register`
		| "i2f"      #op `register`                "=>" `register`
		| "f2f"      #op `register`                "=>" `register`
		| "fadd"     #op `register` "," `register` "=>" `register`
		| "fsub"     #op `register` "," `register` "=>" `register`
		| "fmult"    #op `register` "," `register` "=>" `register`
		| "fdiv"     #op `register` "," `register` "=>" `register`
		| "fcomp"    #op `register` "," `register` "=>" `register`
		| "fload"    #op `register`                "=>" `register`
		| "floadAI"  #op `register` "," `int`      "=>" `register`
		| "floadAO"  #op `register` "," `register` "=>" `register`
		| "fstore"   #op `register`                "=>" `register`
		| "fstoreAI" #op `register`                "=>" `register` "," `int`
		| "fstoreAO" #op `register`                "=>" `register` "," `register`
		
		// I/O Instructions:
		| "fread"    #op `register`
		| "iread"    #op `register`
		| "fwrite"   #op `register`
		| "iwrite"   #op `register`
		| "swrite"   #op `register`
		
		// Branch Instructions:
		| "jumpI"    #op                           "->" `label`
		| "jump"     #op                           "->" `register`
		| "ret"      #op 
		| "cbr"      #op `register`                "->" `label`
		| "cbrne"    #op `register`                "->" `label`
		| "cbr_LT"   #op `register` "," `register` "->" `label`
		| "cbr_LE"   #op `register` "," `register` "->" `label`
		| "cbr_GT"   #op `register` "," `register` "->" `label`
		| "cbr_GE"   #op `register` "," `register` "->" `label`
		| "cbr_EQ"   #op `register` "," `register` "->" `label`
		| "cbr_NE"   #op `register` "," `register` "->" `label`
		
		// Undocumented Instructions:
		| "nop"      #op
		| "call"     #op `label` ("," `register`)*
		| "icall"    #op `label` ("," `register`)* "=>" `register`
		| "iret"     #op                                `register`
	);













