
// vim: ts=4

%include <abc.zb>

// charset: char literal: 'c', (charset $1)
// charset: set-range: <$1> - <$2>
// charset: set-intersect: <$1> & <$2> ...
// charset: set-symmetric-difference: <$1> ^ <$2> ...
// charset: set-union: <$1> ['|',',']? <$2> ...
// charset: set-complement: ~ <$1>

//    -?FA string literal, parenthesis: "literal", [char-set $1], (?FA $1)
// DFA-DFA prefixes: !<$1>
// NFA-NFA suffixes: <$1>?, <$1>+, <$1>*, <$1>{a, b}
// NFA-NFA concatenation: <$1>   <$2>   ...
// DFA-DFA boolean-and  : <$1> & <$2> & ...
// NFA-NFA boolean-or   : <$1> | <$2> | ...

// LRP charater/string literal, regex, parenthesis: "token", `DFA $1`, (LRP $1)
// LRP multiplicities: <$1>?, <$1>+, <$1>*, <$1>{a}, <$1>{a, b};
// LRP subdefinitions: ('%' definition (',' definitions)* ':')? <$1>
// LRP concatenation: <$1> <$2> ...;
// LRP or: <$1> | <$2> ... ;

// there will still have to be a tokenizer.
// the tokenizer uses the current state of the parser to look up
// the appropriate state machine to use. Given this state machine,
// the current character, and the current state, it can lookup the next
// state. When the state returns a token enum value, it's done, feed it
// to parser state machine.

// %disambiguate: error;
// %disambiguate: literal > regex;
// %disambiguate: "abcc" > "abcccc"; // x2 length beats x3 length

%skip: [' ', 'g'];

%token_skip: '-';

[wy]: 'w' - 'y';

// abc?
// abcc:yy.
// aabbcc::x!
// baccabgccbbaa
// ABCCBA

%start
	: "abc"                #abc                                            "?"?
	
	| `abc & (..)*`  #even__abc  ":"        [wy]*                          "."
	
	| `abc & (...)*` #three_abc (":")+ [(~((~wy) & (~ 'x'-'z'))) & (~'w')] "!"
	
	| %[b]: 'b';
	   `b`: [b,          'B'];
	   (a): 'a' (b | c)? 'a' ;
	    b : `b` (a | c)? `b` ;
	    c : 'c' (a | b)? 'c' :
	    (b a | b c | a c | c a)+
	
	| % a : 'A' #A (b #subB | c #subC)? 'A' ;
	    b : 'B' #B (a #subA | c #subC)? 'B' ;
	    c : 'C' #C (a #subA | b #subB)? 'C' :
	          (a #A | b #B | c #C)+   ;

%skip: ['h']+;















